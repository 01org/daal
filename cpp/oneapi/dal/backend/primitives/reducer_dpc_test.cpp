/*******************************************************************************
* Copyright 2020 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#include "gtest/gtest.h"

#define ONEAPI_DAL_DATA_PARALLEL

#include <CL/sycl.hpp>

#include "oneapi/dal/backend/common.hpp"

#include "oneapi/dal/backend/primitives/functors.hpp"
#include "oneapi/dal/backend/primitives/reducer.hpp"
#include "oneapi/dal/data/array.hpp"

TEST(reducer_l2_rm, can_handle_array_of_zeros) {
    cl::sycl::queue q{ cl::sycl::gpu_selector() };

    auto inp = oneapi::dal::array<float>::zeros(q, 35);
    auto out = oneapi::dal::array<float>::zeros(q, 7);

    auto reducer = oneapi::dal::backend::primitives::
        l2_reducer_singlepass<float, oneapi::dal::backend::primitives::layout::row_major>(q);
    ASSERT_TRUE(reducer.vectors_are_rows);
    ASSERT_EQ(reducer.binary.init_value, 0.f);
    auto res = reducer(inp, out, 5, 7);
    res.wait();

    for (std::int64_t i = 0; i < 7; i++)
        ASSERT_EQ(out[i], 0.f);
}

TEST(reducer_l2_rm, random_data_reduce) {
    constexpr std::int64_t nx = 13, ny = 29;
    constexpr std::int64_t size = nx * ny;
    const float data[size]      = {
        6.08266015e-01, 6.05727038e-01, 8.16281435e-01, 8.18671462e-02, 8.17396226e-01,
        9.87432906e-02, 5.50243720e-01, 2.19223528e-01, 2.24632861e-02, 1.56732197e-01,
        7.93423508e-01, 6.40665133e-01, 5.19270739e-01, 5.64113575e-01, 5.61293604e-01,
        6.03263630e-01, 9.87167164e-01, 2.84155276e-01, 3.34357691e-01, 3.16268947e-01,
        9.37621154e-01, 5.73407012e-01, 3.68777091e-01, 2.02448528e-01, 9.50203137e-01,
        8.61266789e-01, 5.95825808e-01, 9.08448422e-01, 2.50209576e-01, 2.29154243e-03,
        2.92135412e-01, 1.82345131e-01, 9.94168737e-01, 6.95087564e-01, 4.47116113e-01,
        9.66545008e-02, 2.39584052e-02, 8.31925274e-01, 7.85959489e-01, 5.57332022e-01,
        8.33453119e-02, 7.70557026e-01, 4.51693874e-01, 1.72644400e-01, 9.92938045e-01,
        8.28405945e-01, 7.16109438e-01, 8.67660604e-01, 3.44217217e-01, 3.04180238e-04,
        4.45334268e-01, 5.08296771e-01, 6.96408136e-01, 7.00536585e-01, 4.80827450e-01,
        2.71704403e-01, 3.87279882e-01, 8.84506063e-01, 3.52335643e-01, 6.71135157e-01,
        8.33688294e-01, 1.40304177e-01, 3.10202211e-01, 2.46216629e-01, 1.15378002e-01,
        4.99239201e-02, 3.66407006e-01, 7.86128322e-01, 2.41838560e-01, 6.85321222e-01,
        4.22587886e-01, 5.82074176e-01, 4.43547421e-02, 5.14880364e-01, 4.28200749e-01,
        7.28583982e-01, 5.64736401e-01, 5.36782863e-01, 5.59674774e-01, 7.43344281e-02,
        8.14190249e-01, 6.60750376e-01, 8.77338764e-01, 1.64027585e-01, 9.57593981e-01,
        9.52020149e-01, 6.54090004e-02, 1.49486756e-01, 4.22974743e-01, 3.43165640e-01,
        7.56617204e-01, 1.18419261e-01, 7.04774735e-01, 5.07637609e-01, 4.41217814e-01,
        3.86582746e-01, 2.35693549e-02, 5.14442477e-01, 4.87597625e-01, 7.91862949e-01,
        5.83494286e-02, 7.03345860e-01, 3.16812296e-02, 1.21090083e-01, 2.77215576e-01,
        4.74249117e-01, 9.57305098e-01, 5.34504103e-01, 3.37524583e-02, 9.98452887e-01,
        4.62858935e-01, 1.25775433e-01, 3.70493461e-01, 3.62074302e-01, 7.19471619e-01,
        4.67893994e-01, 1.99503760e-01, 4.40510916e-01, 5.80544319e-01, 6.97553644e-01,
        9.19134825e-01, 9.20320322e-01, 2.48146072e-01, 9.09659602e-02, 2.60585410e-01,
        7.58854426e-01, 5.93878155e-01, 6.15178605e-01, 6.82986103e-01, 6.65697320e-01,
        6.51140473e-04, 1.93260656e-01, 4.27858140e-01, 5.83502547e-01, 8.48414084e-01,
        8.36902581e-01, 4.24181105e-02, 5.38417777e-01, 4.94773575e-01, 1.07602952e-01,
        6.84670593e-01, 2.10557023e-01, 3.37028966e-01, 3.55647528e-01, 2.10542223e-01,
        8.56367439e-01, 2.11716737e-01, 1.60510664e-01, 8.23565390e-01, 4.15942970e-01,
        5.81671284e-01, 7.03893582e-01, 4.90287204e-02, 6.18257146e-01, 3.84651500e-01,
        2.77432259e-01, 3.77057285e-01, 8.59316818e-01, 3.34127428e-01, 6.89985195e-01,
        5.34839176e-01, 7.77762922e-01, 6.01463959e-02, 7.71105570e-01, 2.61147659e-01,
        1.31927976e-01, 3.27840451e-01, 6.96545789e-01, 9.56890361e-01, 2.96027195e-01,
        9.05992645e-01, 3.44988797e-01, 9.87776722e-02, 9.82445766e-01, 2.36736572e-01,
        8.75108105e-01, 8.73987478e-01, 1.85194154e-02, 1.48820743e-01, 5.07854154e-01,
        8.70574882e-01, 4.34767459e-01, 4.64923617e-01, 5.50681876e-01, 8.07325772e-01,
        1.97349568e-01, 4.85458719e-01, 2.52041221e-01, 1.92801760e-01, 8.41693928e-02,
        8.57405920e-02, 7.57809558e-01, 7.21125740e-01, 3.84026789e-01, 3.00786408e-01,
        1.89972942e-01, 3.77283916e-01, 8.10641281e-01, 7.17716866e-01, 1.55823119e-03,
        9.64063580e-01, 1.79074425e-01, 7.14461969e-01, 1.52161060e-01, 1.80841546e-01,
        2.00003995e-01, 4.19573965e-01, 3.70081096e-01, 9.82369561e-01, 1.68481924e-01,
        2.66159225e-01, 3.68375951e-01, 8.22082213e-01, 8.08022431e-01, 3.27515760e-01,
        8.13062808e-01, 4.40636554e-01, 3.67208136e-02, 7.59481861e-01, 7.37941327e-01,
        6.16843712e-01, 3.78019893e-01, 8.98083741e-01, 4.18859087e-01, 7.72207331e-01,
        7.72085021e-01, 6.37444749e-01, 5.55364211e-01, 8.76571607e-01, 8.81627016e-03,
        3.40529997e-02, 1.06841982e-01, 2.46549501e-01, 8.96596641e-01, 7.16051624e-01,
        1.55041980e-01, 4.68817439e-01, 5.71474746e-01, 5.95125783e-01, 8.21265551e-01,
        6.22497295e-01, 6.98835834e-02, 3.02689288e-01, 9.20716317e-01, 5.38847056e-01,
        1.31065752e-01, 5.20964164e-02, 3.94788090e-01, 4.44441208e-01, 8.41970072e-01,
        7.95839642e-01, 7.06222941e-01, 3.07094727e-01, 4.71635051e-01, 6.95167909e-01,
        4.87705811e-01, 9.80875880e-01, 8.47429993e-01, 7.99278573e-01, 8.03055359e-01,
        5.15041949e-01, 1.54601610e-01, 1.83452684e-01, 5.44926529e-01, 3.61060027e-01,
        5.30889049e-01, 3.94774560e-01, 6.45476808e-01, 3.20248367e-01, 7.51242537e-01,
        6.79475419e-01, 9.77114986e-02, 8.00135435e-01, 5.13456528e-01, 5.39903025e-01,
        2.22219806e-01, 8.61253542e-02, 8.37682505e-01, 4.00777543e-01, 9.65276184e-02,
        4.66551200e-01, 6.56479074e-01, 8.19843719e-01, 3.71762075e-01, 9.27065163e-01,
        6.51141093e-02, 1.75910189e-01, 8.97997910e-01, 4.84584555e-01, 7.37448745e-01,
        5.29170464e-01, 5.03419050e-01, 5.86423732e-01, 5.22511174e-01, 2.03679645e-01,
        6.06334781e-01, 3.35332714e-01, 4.70270025e-01, 5.77608700e-01, 3.17506150e-01,
        4.26761534e-01, 1.21746261e-01, 1.29382337e-01, 3.39261222e-01, 5.26868973e-01,
        9.78393336e-01, 4.32418987e-01, 9.75388516e-01, 4.45526191e-01, 7.28958199e-01,
        2.19904203e-01, 7.12695837e-01, 7.15989708e-01, 9.71994816e-01, 4.20998253e-01,
        5.47380502e-01, 7.61885168e-01, 5.12042467e-01, 3.71666762e-01, 1.59418935e-01,
        8.08032749e-01, 3.83869967e-01, 7.37555502e-01, 5.57652733e-01, 4.01889435e-01,
        7.02682404e-01, 7.85953416e-01, 8.20295938e-01, 8.36124252e-01, 3.64473260e-01,
        7.88578965e-01, 9.31515023e-02, 4.29578336e-01, 5.94997849e-01, 5.96603448e-02,
        3.74976922e-01, 6.58367720e-01, 2.05258010e-01, 7.71357150e-01, 6.40231937e-01,
        1.87657221e-01, 4.52644412e-01, 8.54667886e-01, 7.49524561e-01, 3.75177343e-01,
        8.02357007e-01, 5.85784764e-01, 3.14848323e-01, 9.07061320e-01, 7.73886588e-01,
        6.93191912e-01, 5.14800505e-01, 8.06316758e-01, 1.15278330e-01, 7.21638091e-01,
        9.04321900e-01, 4.16006451e-01, 4.50714398e-01, 3.04517278e-01, 2.99471721e-01,
        7.96779651e-01, 8.08662734e-01, 4.35474855e-01, 1.72980348e-01, 1.29659259e-01,
        9.62212414e-01, 9.36481211e-01, 3.55825253e-01, 2.38375772e-01, 5.49425873e-01,
        7.14279925e-01, 5.11857389e-01, 5.44607827e-01, 5.10422096e-01, 6.45852780e-01,
        1.87292744e-01, 6.22012556e-01
    };
    const float result[ny] = { 3.77330869, 5.29384345, 4.35266895, 4.65816082, 3.67253516,
                               3.38860884, 4.93397974, 2.75631738, 3.77672279, 5.06383597,
                               3.15586919, 3.26941334, 4.55140545, 4.81547106, 2.89317635,
                               3.23149481, 4.99441006, 4.67778355, 3.75376728, 6.19627221,
                               3.38283993, 3.80625953, 3.84272132, 4.08897591, 4.75724009,
                               4.40515521, 5.66621902, 4.3339877,  4.47339093 };
    cl::sycl::queue q{ cl::sycl::gpu_selector() };

    auto inp = oneapi::dal::array<float>::zeros(q, size);
    auto out = oneapi::dal::array<float>::zeros(q, ny);

    for (std::int64_t i = 0; i < size; i++)
        inp[i] = data[i];

    auto reducer = oneapi::dal::backend::primitives::
        l2_reducer_singlepass<float, oneapi::dal::backend::primitives::layout::row_major>(q);
    ASSERT_TRUE(reducer.vectors_are_rows);
    ASSERT_EQ(reducer.binary.init_value, 0.f);
    auto res = reducer(inp, out, 13, 29);
    res.wait();

    for (std::int64_t i = 0; i < ny; i++) {
        const float ratio = out[i] / result[i];
        ASSERT_LT(ratio, 1.01);
        ASSERT_LT(0.99, ratio);
    }
}

TEST(reducer_mean, can_handle_array) {
    cl::sycl::queue q{ cl::sycl::gpu_selector() };

    auto inp = oneapi::dal::array<float>::zeros(q, 35);
    auto out = oneapi::dal::array<float>::zeros(q, 7);

    for (std::int64_t i = 0; i < inp.get_count(); i++)
        inp[i] = static_cast<float>(i);

    auto reducer = oneapi::dal::backend::primitives::
        mean_reducer_singlepass<float, oneapi::dal::backend::primitives::layout::row_major>(q);
    ASSERT_TRUE(reducer.vectors_are_rows);
    ASSERT_EQ(reducer.binary.init_value, 0.f);
    auto res = reducer(inp, out, 5, 7);
    res.wait();

    for (std::int64_t i = 0; i < 7; i++)
        ASSERT_EQ(out[i], 25.f * float(i) + 10.f);
}
