/*******************************************************************************
* Copyright 2014-2019 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms::neural_networks::prediction namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes,
                                add_getitem, add_aliases, add_ignores, handle_all_templates, add_setgetitem %}
{% set ns  = 'algorithms::neural_networks::prediction' %}
{% set module  = 'prediction' %}
{% set package = 'algorithms.neural_networks' %}

// see jinjadefs.tmpl for all configuration options evaluated by standard macros.
//   E.g. 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': [
        'algorithms/neural_networks/neural_networks_prediction_types.h',
        'algorithms/neural_networks/neural_networks_prediction_result.h',
        'algorithms/neural_networks/neural_networks_prediction.h',
        'algorithms/neural_networks/neural_networks_prediction_model.h',
        'algorithms/neural_networks/neural_networks_prediction_input.h',
        'algorithms/neural_networks/neural_networks_prediction_topology.h',
    ],
    'classes': [
        'Input',
        'Model',
        'Parameter',
        'Result',
        'Topology',
    ],
    'methods': [
        ['defaultDense', 'feedforwardDense'],
    ],
    'templates': {
        'Result::allocate': [['fptype', fptypes, '']],
        'Batch': [['fptype', fptypes, 'float'], ['method', 'methods', 'feedforwardDense']],
        'Model::Model': [['fptype', fptypes, '']],
        'Model::allocate': [['fptype', fptypes, '']],
    },
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_algorithms
#define USE_algorithms__neural_networks
#define USE_algorithms__neural_networks__initializers
#define USE_algorithms__engines
#define USE_algorithms__engines__mt19937
#define USE_algorithms__neural_networks__initializers__uniform
#define USE_algorithms__neural_networks__prediction
#define USE_algorithms__neural_networks__layers
#define USE_algorithms__neural_networks__layers__backward
#define USE_algorithms__neural_networks__layers__forward

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here
%rename(getTensorInput)      daal::{{ns}}::interface1::Input::get(TensorInputId id) const;
%rename(setTensorInput)      daal::{{ns}}::interface1::Input::set(TensorInputId id, const data_management::TensorPtr &value);
%rename(getModelInput)       daal::{{ns}}::interface1::Input::get(ModelInputId id) const;
%rename(setModelInput)       daal::{{ns}}::interface1::Input::set(ModelInputId id, const ModelPtr &value);
%rename(getResult)           daal::{{ns}}::interface1::Result::get(ResultId id) const;
%rename(setResult)           daal::{{ns}}::interface1::Result::set(ResultId id, const data_management::TensorPtr &value);
%rename(getResultCollection) daal::{{ns}}::interface1::Result::get(ResultCollectionId id) const;
%rename(setResultCollection) daal::{{ns}}::interface1::Result::set(ResultCollectionId id, const data_management::KeyValueDataCollectionPtr &value);

// only import the last module in package hierachy (omit importing its parents)
%import "algorithms.i"
%import "algorithms__neural_networks__layers__forward.i"
%import "algorithms__neural_networks__layers__backward.i"

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::{{ns}};
using namespace daal::algorithms::neural_networks;
%}


// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    {{add_compute("Batch")}}
    // no Online
    // no Distributed
    {{add_setgetitem('Topology', 'daal::algorithms::neural_networks::layers::forward::LayerDescriptor&', 'size_t')}};
    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}
