/*******************************************************************************
* Copyright 2014-2019 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms::optimization_solver::iterative_solver namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes,
                                add_getitem, add_aliases, add_ignores, handle_all_templates %}
{% set ns  = 'algorithms::optimization_solver::iterative_solver' %}
{% set module  = 'iterative_solver' %}
{% set package = 'algorithms.optimization_solver' %}

// see jinjadefs.tmpl for all configuration options evaluated by standard macros.
//   E.g. 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': [
        'algorithms/optimization_solver/iterative_solver/iterative_solver_types.h',
        'algorithms/optimization_solver/iterative_solver/iterative_solver_batch.h',
    ],
    'classes': [
        'Batch',
        'Input',
        'Parameter',
        'Result',
    ],
    'methods': [
    ],
    'templates': {
        'Result::allocate': [['fptype', fptypes, '']],
    },
    'namespaces': {
        'Batch': 'interface2',
        'BatchPtr': 'interface2',
        'Input': 'interface2',
        'Result': 'interface2',
        'Result::allocate': 'interface2',
        'ResultPtr': 'interface2',
        'Parameter': 'interface2',
    }
} %}

%module(package="daal.{{package}}") {{module}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_algorithms
#define USE_algorithms__optimization_solver
#define USE_algorithms__optimization_solver__iterative_solver
#define USE_algorithms__optimization_solver__sum_of_functions
#define USE_algorithms__optimization_solver__objective_function
#define USE_algorithms__engines
#define USE_algorithms__engines__mt19937

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here
/* E.g. if a list of get/set methods follows here
*/
// renaming, typemaps need to go before declarations -> put them here

%rename(interface1_Parameter) daal::{{ns}}::interface1::Parameter;

%shared_ptr(daal::{{ns}}::interface1::Parameter);

%rename(interface1_Input) daal::{{ns}}::interface1::Input;

%shared_ptr(daal::{{ns}}::interface1::Input);

%rename(interface1_Result) daal::{{ns}}::interface1::Result;

%shared_ptr(daal::{{ns}}::interface1::Result);

%rename(interface1_Batch) daal::{{ns}}::interface1::Batch;

%shared_ptr(daal::{{ns}}::interface1::Batch);

%rename(getInput)  daal::{{ns}}::interface2::Input::get(InputId id) const;
%rename(setInput)  daal::{{ns}}::interface2::Input::set(InputId id, const data_management::NumericTablePtr &ptr);
%rename(getOptionalInput)  daal::{{ns}}::interface2::Input::get(OptionalInputId id) const;
%rename(setOptionalInput)  daal::{{ns}}::interface2::Input::set(OptionalInputId id, const algorithms::OptionalArgumentPtr &ptr);
%rename(getResult)  daal::{{ns}}::interface2::Result::get(ResultId id) const;
%rename(setResult)  daal::{{ns}}::interface2::Result::set(ResultId id, const data_management::NumericTablePtr &ptr);
%rename(getOptionalResult)  daal::{{ns}}::interface2::Result::get(OptionalResultId id) const;
%rename(setOptionalResult)  daal::{{ns}}::interface2::Result::set(OptionalResultId id, const algorithms::OptionalArgumentPtr &ptr);
%rename(interface1_getInput)  daal::{{ns}}::interface1::Input::get(InputId id) const;
%rename(interface1_setInput)  daal::{{ns}}::interface1::Input::set(InputId id, const data_management::NumericTablePtr &ptr);
%rename(interface1_getOptionalInput)  daal::{{ns}}::interface1::Input::get(OptionalInputId id) const;
%rename(interface1_setOptionalInput)  daal::{{ns}}::interface1::Input::set(OptionalInputId id, const algorithms::OptionalArgumentPtr &ptr);
%rename(interface1_getResult)  daal::{{ns}}::interface1::Result::get(ResultId id) const;
%rename(interface1_setResult)  daal::{{ns}}::interface1::Result::set(ResultId id, const data_management::NumericTablePtr &ptr);
%rename(interface1_getOptionalResult)  daal::{{ns}}::interface1::Result::get(OptionalResultId id) const;
%rename(interface1_setOptionalResult)  daal::{{ns}}::interface1::Result::set(OptionalResultId id, const algorithms::OptionalArgumentPtr &ptr);

// only import the last module in package hierachy (omit importing its parents)
%import "algorithms__optimization_solver.i"

%pythoncode %{
    import sys
    daal.algorithms.optimization_solver = sys.modules[__package__]
    del sys
%}

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::algorithms::optimization_solver::iterative_solver;
using namespace daal::algorithms::optimization_solver;
using namespace daal::algorithms;
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    {{add_compute("Batch", cfg=cfg)}}
    // no Online
    // no Distributed

    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}
