/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::${namespace} namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace,
                                add_includes, add_aliases, add_ignores, handle_all_templates %}
{% set ns  = 'data_management' %}
{% set module  = 'db' %}
{% set package = 'data_management' %}

// see jinjadefs.tmpl for all configuration options evaluated
// by standard macros.
// like 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'descript': 'Database data sources like MySQL and ODBC',
    'includes': ['data_management/data_source/mysql_feature_manager.h',
                 'data_management/data_source/odbc_data_source.h',],
    'classes': ['MySQLFeatureManager',],
    'templates': {
        'ODBCDataSource': [['FeatureManager',
                            ['daal::data_management::interface1::MySQLFeatureManager'],
                            'daal::data_management::interface1::MySQLFeatureManager'],
                           ['StatsType', stypes, 'double']],
    },
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_{{package.replace('.', '__')}}__{{module}}
#define USE_{{package.replace('.', '__')}}

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here

// only import the last module in package hierachy (omit importing its parents)
%import "{{package.replace('.', '__')}}.i"

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
#include <data_management/data_source/mysql_feature_manager.h>
#include <data_management/data_source/odbc_data_source.h>
using namespace daal::{{package}};
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}

    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}
