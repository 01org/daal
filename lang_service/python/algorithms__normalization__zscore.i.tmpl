/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms::normalization::zscore namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes,
                                add_getitem, add_aliases, add_ignores, handle_all_templates, cls_with_iface %}
{% set ns  = 'algorithms::normalization::zscore' %}
{% set module  = 'zscore' %}
{% set package = 'algorithms.normalization' %}

// see jinjadefs.tmpl for all configuration options evaluated by standard macros.
//   E.g. 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': [
        'algorithms/normalization/zscore_types.h',
        'algorithms/normalization/zscore.h',
    ],
    'classes': [
        'BatchImpl',
        'BaseParameter',
        'Input',
        'Result',
    ],
    'methods': [
        'defaultDense',
        'sumDense',
    ],
    'templates': {
        'Batch': [['fptype', fptypes, 'double'], ['method', 'methods', 'defaultDense']],
        'Parameter': [['fptype', fptypes, ''], ['method', 'methods', '']],
        'Result::allocate': [['fptype', fptypes, '']],
    },
    'namespaces': {
        'Batch': 'interface3',
        'BatchContainer': 'interface3',
        'BatchImpl': 'interface3',
        'BaseParameter': 'interface3',
        'Result': 'interface2',
        'Result::allocate': 'interface2',
        'ResultPtr': 'interface2',
        'Parameter': 'interface3',
    },
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_algorithms
#define USE_algorithms__normalization
#define USE_algorithms__normalization__zscore
#define USE_algorithms__low_order_moments

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here

// Create compact wrapper for constructors with default SharedPtr args so our typemaps are applied
%feature("compactdefaultargs", "1") daal::algorithms::normalization::zscore::{{cls_with_iface('Parameter', cfg)}}::Parameter;

// only import the last module in package hierachy (omit importing its parents)
%import "algorithms__low_order_moments.i"

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::{{ns}};
using namespace daal::algorithms;
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    {{add_compute("Batch", cfg=cfg)}}
    // no Online
    // no Distributed
    {{handle_all_templates(ns, cfg)}}
{% endcall %}

{{add_aliases(cfg)}}
