/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms::pca namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes,
                         add_getitem, add_aliases, add_ignores, handle_all_templates, cls_with_iface %}
{% set ns  = 'algorithms::pca' %}
{% set module  = 'pca' %}
{% set package = 'algorithms' %}

// see jinjadefs.tmpl for all configuration options evaluated
// by standard macros.
// like 'needpatch', 'ignore', 'steps', 'methods' and others

{% set cfg = {
    'includes': ['algorithms/pca/pca_types.h', 'algorithms/pca/pca_batch.h',
                 'algorithms/pca/pca_online.h', 'algorithms/pca/pca_distributed.h',],
    'classes': ['Input', 'InputIface', 'PartialResultBase', 'Result', 'BaseBatchParameter'],
    'methods': ['svdDense', ['correlationDense', 'defaultDense']],
    'steps': ['daal::step1Local', 'daal::step2Master'],
    'templates': {
        'BaseParameter': [['fptype', fptypes, ''], ['method', 'methods', 'correlationDense']],
        'Batch': [['fptype', fptypes, 'double'], ['method', 'methods', 'correlationDense']],
        'BatchParameter': [['fptype', fptypes, ''], ['method', 'methods', '']],
        'Distributed': [['step', 'steps', ''], ['fptype', fptypes, 'double'], ['method', 'methods', 'correlationDense']],
        'DistributedInput': [['method', 'methods', '']],
        'DistributedParameter': [['step', 'steps', ''], ['fptype', fptypes, ''], ['method', 'methods', '']],
        'Online': [['fptype', fptypes, 'double'], ['method', 'methods', 'correlationDense']],
        'OnlineParameter': [['fptype', fptypes, ''], ['method', 'methods', '']],
        'PartialResult': [['method', 'methods', '']],
        'Result::allocate': [['fptype', fptypes, '']],
    },
    'namespaces': {
        'Batch': 'interface3',
        'BatchContainer': 'interface3',
        'BatchParameter': 'interface3',
        'BaseBatchParameter': 'interface3',
        'Result': 'interface3',
        'Result::allocate': 'interface3',
        'ResultPtr': 'interface3',
    },
    'ignore': ['BaseParameter']
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_{{ns.replace('::', '__')}}
#define USE_{{package.replace('.', '__')}}
#define USE_algorithms__covariance

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here
%rename(setDataset) daal::algorithms::pca::interface1::Input::set(InputDatasetId id, const data_management::NumericTablePtr &value);
%rename(getDataset) daal::algorithms::pca::interface1::Input::get(InputDatasetId id) const;
%rename(setCorrelation) daal::algorithms::pca::interface1::Input::set(InputCorrelationId id, const data_management::NumericTablePtr &value);
%rename(getCorrelation) daal::algorithms::pca::interface1::Input::get(InputCorrelationId id) const;
%rename(setSVDTable) daal::algorithms::pca::interface1::PartialResult::set(PartialSVDTableResultId id, const data_management::NumericTablePtr &value);
%rename(getSVDTable) daal::algorithms::pca::interface1::PartialResult::get(PartialSVDTableResultId id) const;
%rename(setSVDCollection) daal::algorithms::pca::interface1::PartialResult::set(PartialSVDCollectionResultId id, const data_management::DataCollectionPtr &value);
%rename(getSVDCollection) daal::algorithms::pca::interface1::PartialResult::get(PartialSVDCollectionResultId id) const;
%rename(getSVDCollection) daal::algorithms::pca::interface1::PartialResult::get(PartialSVDCollectionResultId id, const size_t &elementId) const;
%rename(getCollection) daal::algorithms::pca::interface3::Result::get(ResultCollectionId id) const;

// Create compact wrapper for constructors with default SharedPtr args so our typemaps are applied
%feature("compactdefaultargs", "1") daal::algorithms::pca::{{cls_with_iface('BatchParameter', cfg)}}::BatchParameter;
%feature("compactdefaultargs", "1") daal::algorithms::pca::{{cls_with_iface('OnlineParameter', cfg)}}::OnlineParameter;
%feature("compactdefaultargs", "1") daal::algorithms::pca::{{cls_with_iface('DistributedParameter', cfg)}}::DistributedParameter;

// only import the last module in package hierachy (omit importing its parents)
%import "{{package.replace('.', '__')}}.i"
%import "algorithms__covariance.i"

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>

using namespace daal::{{ns}};
using namespace daal::algorithms;
using namespace daal;
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

using namespace daal::algorithms::pca;


{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    {{add_compute("Batch", cfg=cfg)}}
    {{add_compute2(ns, cfg, 'Online', pr='PartialResult<>', firsttaforpr=1)}}
    {{add_compute2(ns, cfg, 'Distributed', pr='PartialResult<>', firsttaforpr=2)}}

    %extend {{cls_with_iface('PartialResult', cfg)}}<daal::algorithms::pca::correlationDense> {
        %template(initialize_Float32) initialize<float>;
        %template(initialize_Float64) initialize<double>;
        %template(allocate_Float32) allocate<float>;
        %template(allocate_Float64) allocate<double>;
    };

    %extend {{cls_with_iface('PartialResult', cfg)}}<daal::algorithms::pca::svdDense> {
        %template(initialize_Float32) initialize<float>;
        %template(initialize_Float64) initialize<double>;
        %template(allocate_Float32) allocate<float>;
        %template(allocate_Float64) allocate<double>;
    };

    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}
