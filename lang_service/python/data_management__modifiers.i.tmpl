/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::${namespace} namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes,
                                add_getitem, add_aliases, add_ignores, handle_all_templates %}
{% set ns  = 'data_management::modifiers' %}
{% set module  = 'modifiers' %}
{% set package = 'data_management' %}

// see jinjadefs.tmpl for all configuration options evaluated by standard macros.
//   E.g. 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': ['data_management/data_source/modifiers/modifier.h'],
    'classes': ['ConfigIface', 'ContextIface'],
    'module': 'modifiers',
    'namespace': 'data_management::modifiers',
    'package': 'data_management',
    'templates': {
    },
    'ignore': ['ConfigIface', 'ContextIface', 'FeatureModifierIface', 'Context::getTokenAs', 'is',],
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_{{cfg.namespace.replace('::', '__')}}

%include "daal_common.i"
%warnfilter(401) FeatureModifierIface;
%warnfilter(401) Base;

// renaming, typemaps need to go before declarations -> put them here
// E.g. if a list of get/set methods follows here

// only import the last module in package hierachy (omit importing its parents)
//%import "data_management.i"

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::{{ns}};
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns, 'interface1'])) %}
    // Add our compute wrappers
    // no Batch
    // no Online
    // no Distributed
    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}
