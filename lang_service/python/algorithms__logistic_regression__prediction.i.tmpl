/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms::logistic_regression::prediction namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes, add_aliases, add_ignores, handle_all_templates %}
{% set ns  = 'algorithms::logistic_regression::prediction' %}
{% set module  = 'prediction' %}
{% set package = 'algorithms.logistic_regression' %}

// see jinjadefs.tmpl for all configuration options evaluated
// by standard macros.
// like 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': ['algorithms/logistic_regression/logistic_regression_predict_types.h',
                 'algorithms/logistic_regression/logistic_regression_predict.h',],
    'methods': ['defaultDense'],
    'classes' : ['Input', 'Parameter', 'Result'],
    'templates': {
        'Batch': [['fptype', fptypes, 'double'], ['method', 'methods', 'defaultDense']],
        'Result::allocate' : [['fptype', fptypes, '']],
    },
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_{{ns.replace('::', '__')}}
#define USE_{{package.replace('.', '__')}}
#define USE_algorithms__classifier
#define USE_algorithms__classifier__prediction
#define USE_algorithms__logistic_regression__prediction

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here
%rename(setTable) daal::algorithms::logistic_regression::prediction::interface1::Input::set(classifier::prediction::NumericTableInputId id, const data_management::NumericTablePtr &ptr);
%rename(getTable) daal::algorithms::logistic_regression::prediction::interface1::Input::get(classifier::prediction::NumericTableInputId id) const;
%rename(setModel) daal::algorithms::logistic_regression::prediction::interface1::Input::set(classifier::prediction::ModelInputId id, const ModelPtr &ptr);
%rename(getModel) daal::algorithms::logistic_regression::prediction::interface1::Input::get(classifier::prediction::ModelInputId id) const;
%rename(getTable) /*data_management::NumericTablePtr */ daal::{{ns}}::interface1::Result::get(ResultNumericTableId id) const;
%rename(setTable) /*void */ daal::{{ns}}::interface1::Result::set(ResultNumericTableId id, const data_management::NumericTablePtr &value);

// only import the last module in package hierachy (omit importing its parents)
%import "{{package.replace('.', '__')}}.i"
%import "algorithms__classifier__prediction.i"
%shared_ptr(daal::algorithms::logistic_regression::prediction::interface1::Result);

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::{{ns}};
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    {{add_compute("Batch")}}
    // no Online
    // no Distributed

    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}
