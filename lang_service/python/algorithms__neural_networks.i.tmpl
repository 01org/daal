/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms::neural_networks namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes,
                                add_getitem, add_aliases, add_ignores, handle_all_templates, cls_with_iface %}
{% set ns  = 'algorithms::neural_networks' %}
{% set module  = 'neural_networks' %}
{% set package = 'algorithms' %}

// see jinjadefs.tmpl for all configuration options evaluated by standard macros.
//   E.g. 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': [
        'algorithms/neural_networks/neural_networks_types.h',
        'algorithms/neural_networks/neural_networks_learnable_parameters.h',
    ],
    'classes': [
        'LearnableParametersIface',
        'ModelImpl',
    ],
    'methods': [
    ],
    'templates': {
    },
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_algorithms
#define USE_algorithms__neural_networks
#define USE_algorithms__neural_networks__layers
#define USE_algorithms__neural_networks__layers__forward
#define USE_algorithms__neural_networks__layers__backward
#define USE_algorithms__neural_networks__initializers
#define USE_algorithms__engines
#define USE_algorithms__engines__mt19937

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here

// only import the last module in package hierachy (omit importing its parents)
%import "algorithms.i"
%import "algorithms__neural_networks__layers__backward.i"
%import "algorithms__neural_networks__layers__forward.i"


// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::{{ns}};
using daal::services::Collection;
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}
// we get doubly defiend symbols after removeing "interface1" from the generated c++-code
// adding the ignores skips the interface1 and keeps the one in the parent namespace
%ignore daal::algorithms::neural_networks::{{cls_with_iface('ForwardLayers', cfg)}};
%ignore daal::algorithms::neural_networks::{{cls_with_iface('BackwardLayers', cfg)}};

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

%feature("docstring") daal::services::Collection< daal::algorithms::neural_networks::layers::forward::LayerIfacePtr > "
 <a name='DAAL-CLASS-ALGORITHMS__NEURAL_NETWORKS__FORWARDLAYERS'></a>
 \\brief Represents a collection of forward stages of neural network layers";
%template(ForwardLayers)  daal::services::Collection< daal::algorithms::neural_networks::layers::forward::LayerIfacePtr >;

%feature("docstring") daal::services::Collection< daal::algorithms::neural_networks::layers::backward::LayerIfacePtr > "
 <a name='DAAL-CLASS-ALGORITHMS__NEURAL_NETWORKS__BACKWARDLAYERS'></a>
 \\brief Represents a collection of backward stages of neural network layers";
%template(BackwardLayers) daal::services::Collection< daal::algorithms::neural_networks::layers::backward::LayerIfacePtr >;

{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    // no Batch
    // no Online
    // no Distributed

    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}
