/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms::neural_networks::training namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes,
                                add_getitem, add_aliases, add_ignores, handle_all_templates, add_setgetitem %}
{% set ns  = 'algorithms::neural_networks::training' %}
{% set module  = 'training' %}
{% set package = 'algorithms.neural_networks' %}

// see jinjadefs.tmpl for all configuration options evaluated by standard macros.
//   E.g. 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': [
        'algorithms/neural_networks/neural_networks_training_types.h',
        'algorithms/neural_networks/neural_networks_training_result.h',
        'algorithms/neural_networks/neural_networks_training_input.h',
        'algorithms/neural_networks/neural_networks_training_topology.h',
        'algorithms/neural_networks/neural_networks_training.h',
        'algorithms/neural_networks/neural_networks_training_model.h',
        'algorithms/neural_networks/neural_networks_training_distributed.h',
        'algorithms/neural_networks/neural_networks_training_partial_result.h',
    ],
    'classes': [
        'Input',
        'Model',
        'Result',
        'Topology',
        'Parameter',
        'PartialResult',
        'DistributedPartialResult',
    ],
    'methods': [
        ['defaultDense', 'feedforwardDense'],
    ],
    'steps': [
         'daal::step1Local',
         'daal::step2Master',
    ],
    'templates': {
        'Model::initialize': [['fptype', fptypes, '']],
        'Model::getPredictionModel': [['fptype', fptypes, '']],
        'Model::allocate': [['fptype', fptypes, '']],
        'Result::allocate': [['fptype', fptypes, '']],
        'Batch': [['fptype', fptypes, 'float'], ['method', 'methods', 'feedforwardDense']],
        'DistributedInput': [['step', 'steps', '']],
        'Distributed': [['step', 'steps', ''], ['fptype', fptypes, 'float'], ['method', 'methods', 'feedforwardDense']],
        'PartialResult::allocate': [['fptype', fptypes, '']],
        'DistributedPartialResult::allocate': [['fptype', fptypes, '']],
    },
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_algorithms
#define USE_algorithms__neural_networks
#define USE_algorithms__neural_networks__training
#define USE_algorithms__neural_networks__layers
#define USE_algorithms__neural_networks__initializers
#define USE_algorithms__engines
#define USE_algorithms__engines__mt19937
#define USE_algorithms__neural_networks__prediction
#define USE_algorithms__optimization_solver
#define USE_algorithms__optimization_solver__sgd
#define USE_algorithms__optimization_solver__iterative_solver
#define USE_algorithms__optimization_solver__sum_of_functions
#define USE_algorithms__optimization_solver__objective_function


%include "daal_common.i"

// Topology.add(const Topology &topologyBlock, size_t &startIndex)
%apply(int &OUTPUT) {size_t &startIndex};

// renaming, typemaps need to go before declarations -> put them here
// E.g. if a list of get/set methods follows here
%rename(getInput) /*data_management::TensorPtr */ daal::{{ns}}::interface1::Input::get(InputId id) const;
%rename(setInput) /*void */ daal::{{ns}}::interface1::Input::set(InputId id, const data_management::TensorPtr &value);
%rename(getInputCollection) /*data_management::KeyValueDataCollectionPtr */ daal::{{ns}}::interface1::Input::get(InputCollectionId id) const;
%rename(getInputCollection) /*data_management::TensorPtr */ daal::{{ns}}::interface1::Input::get(InputCollectionId id, size_t key) const;
%rename(setInputCollection) /*void */ daal::{{ns}}::interface1::Input::set(InputCollectionId id, const data_management::KeyValueDataCollectionPtr &value);
%rename(getStep1LocalInput) /*ModelPtr */ daal::{{ns}}::interface1::DistributedInput<daal::step1Local>::get(Step1LocalInputId id) const;
%rename(setStep1LocalInput) /*void */ daal::{{ns}}::interface1::DistributedInput<daal::step1Local>::set(Step1LocalInputId id, const ModelPtr &value);
%rename(getStep2MasterInput) /*data_management::KeyValueDataCollectionPtr */ daal::{{ns}}::interface1::DistributedInput<daal::step2Master>::get(Step2MasterInputId id) const;
%rename(setStep2MasterInput) /*void */ daal::{{ns}}::interface1::DistributedInput<daal::step2Master>::set(Step2MasterInputId id, const data_management::KeyValueDataCollectionPtr &value);
// %rename(getResult) /*daal::algorithms::neural_networks::training::ModelPtr */ daal::{{ns}}::interface1::Result::get(ResultId id) const;
// %rename(setResult) /*void */ daal::{{ns}}::interface1::Result::set(ResultId id, const training::ModelPtr &value);
// %rename(getStep1LocalPartialResult) /*data_management::NumericTablePtr */ daal::{{ns}}::interface1::PartialResult::get(Step1LocalPartialResultId id) const;
// %rename(setStep1LocalPartialResult) /*void */ daal::{{ns}}::interface1::PartialResult::set(Step1LocalPartialResultId id, const data_management::NumericTablePtr &value);
// %rename(getStep2MasterPartialResult) /*training::ResultPtr */ daal::{{ns}}::interface1::DistributedPartialResult::get(Step2MasterPartialResultId id) const;
// %rename(setStep2MasterPartialResult) /*void */ daal::{{ns}}::interface1::DistributedPartialResult::set(Step2MasterPartialResultId id, const training::ResultPtr &value);


// only import the last module in package hierachy (omit importing its parents)
%import "algorithms__neural_networks.i"
%import "algorithms__neural_networks__layers.i"
/* {% call() in_namespace('::'.join(['daal', ns])) %} */
/* class Result; */
/* {% endcall %} */
/* {% call() in_namespace('::'.join(['daal', ns])) %} */
/* using interface1::Result; */
/* {% endcall %} */
//using namespace daal::{{ns}};
%import "algorithms__optimization_solver__iterative_solver.i"
%import "algorithms__neural_networks__prediction.i"
%import "algorithms__optimization_solver__sgd.i"
%import "algorithms__optimization_solver__sum_of_functions.i"

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::{{ns}};
using namespace daal::algorithms::neural_networks;
using namespace daal::algorithms;
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    {{add_compute("Batch")}}
    // no Online
    {% for s in cfg.steps %}
      {% set pres = 'DistributedPartialResult' if s == 'daal::step2Master' else 'PartialResult' %}
      {% for fpt in fptypes %}
        {% for m in cfg.methods %}
          {{add_compute2(ns, cfg, 'Distributed< ' + ', '.join([s, fpt, m|first_non_default]) + ' >', pr=pres)}};
        {% endfor %}
      {% endfor %}
    {% endfor %}

    {{add_setgetitem('Topology', 'daal::algorithms::neural_networks::layers::LayerDescriptor&', 'size_t')}};
    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}

