/*******************************************************************************
* Copyright 2014-2019 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms::decision_tree::classification::training namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes, add_aliases, add_ignores, handle_all_templates %}
{% set ns  = 'algorithms::decision_tree::classification::training' %}
{% set module  = 'training' %}
{% set package = 'algorithms.decision_tree.classification' %}

// see jinjadefs.tmpl for all configuration options evaluated
// by standard macros.
// like 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': ['algorithms/decision_tree/decision_tree_classification_training_types.h',
                 'algorithms/decision_tree/decision_tree_classification_training_batch.h',],
    'classes': ['Input', 'Result'],
    'methods': ['defaultDense'],
    'templates': {
        'Batch': [['fptype', fptypes, 'double'], ['method', 'methods', 'defaultDense']],
        'Result::allocate': [['fptype', fptypes, '']],
    },
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_{{ns.replace('::', '__')}}
#define USE_{{package.replace('.', '__')}}
#define USE_algorithms__decision_tree
#define USE_algorithms__decision_tree__training
#define USE_algorithms__decision_tree__classification
#define USE_algorithms__decision_tree__classification__training
#define USE_algorithms__classifier
#define USE_algorithms__classifier__training

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here
// E.g. if a list of get/set methods follows here

%rename(getTable) /*data_management::NumericTablePtr */ daal::{{ns}}::interface1::Input::get(decision_tree::classification::training::InputId id) const;
%rename(setTable) /*void */ daal::{{ns}}::interface1::Input::set(decision_tree::classification::training::InputId id, const data_management::NumericTablePtr &value);

// only import the last module in package hierachy (omit importing its parents)
%import "algorithms__decision_tree__classification.i"
%import "algorithms__classifier__training.i"

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::{{ns}};
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    {{add_compute("Batch")}}
    // no Online
    // no Distributed

    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}
