/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::data_management::features namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes, add_aliases, add_ignores, handle_all_templates %}
{% set ns  = 'data_management::features' %}
{% set module  = 'features' %}
{% set package = 'data_management' %}

// see jinjadefs.tmpl for all configuration options evaluated
// by standard macros.
// like 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': ['data_management/features/defines.h'],
    'ignore': ['data_management/features/shortcuts.h',
               'IdFactory', 
               'FeatureIdMappingIface',
               'FeatureIdMapping',
               'FeatureIdIface',
               'FeatureId',
               'FeatureIdCollectionIface',
               'FeatureIdCollection',
               'FeatureIndexTraits',
               'FeatureIndicesIface',
               'FeatureIndices',],
    'classes': ['FeatureIdMappingIface',
                'FeatureIdMapping',
                'FeatureIdIface',
                'FeatureId',
                'FeatureIdCollectionIface',
                'FeatureIdCollection',
                'FeatureIndexTraits',
                'FeatureIndicesIface',
                'FeatureIndices',],
    'templates': {},
} %}

{{declare_module('daal.'+package, module)}}

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here

// only import the last module in package hierachy (omit importing its parents)
%import "daal.i"

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::{{ns}};
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}
%typecheck(SWIG_TYPECHECK_DOUBLE_ARRAY)
(const daal::services::SharedPtr< daal::{{ns}}::FeatureIdCollectionIface > &)
{
    // we accept a sequence but not string, unicode
    $1 = (PySequence_Check($input) && !CHECK_STRING($input));
}
%typemap(in) const daal::services::SharedPtr< daal::{{ns}}::FeatureIdCollectionIface > &
(daal::{{ns}}::internal::FeatureIdListPtr tmp_list = daal::{{ns}}::internal::FeatureIdList::create(),
 daal::{{ns}}::FeatureIdCollectionIfacePtr tmp_coll)
{
    Py_ssize_t n = PySequence_Length($input);
    for(Py_ssize_t i = 0; i< n; ++i) {
        PyObject * v = PySequence_GetItem($input, i);
        if(PyInt_Check(v)) {
            tmp_list->add(daal::data_management::features::IdFactory(PyLong_AsLong(v)).get());
        } else if(CHECK_STRING(v)) {
            tmp_list->add(daal::data_management::features::IdFactory(GET_STRING(v)).get());
        } else {
            SWIG_fail;
        }
    }
    tmp_coll = tmp_list;
    $1 = &tmp_coll;
}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    // no Batch
    // no Online
    // no Distributed

    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}
