/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms::em_gmm namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes, add_aliases, add_ignores, handle_all_templates %}
{% set ns  = 'algorithms::em_gmm' %}
{% set module  = 'em_gmm' %}
{% set package = 'algorithms' %}

// see jinjadefs.tmpl for all configuration options evaluated
// by standard macros.
// like 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': ['algorithms/em/em_gmm_covariance_storage_id.h',
                 'algorithms/em/em_gmm_types.h',
                 'algorithms/em/em_gmm.h',],
    'classes': ['Input', 'Parameter', 'Result'],
    'methods': ['defaultDense'],
    'templates': {
        'Batch': [['fptype', fptypes, 'double'], ['method', 'methods', 'defaultDense']],
        'Result::allocate': [['fptype', fptypes, '']],
    },
} %}

{{declare_module('daal.'+package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_{{ns.replace('::', '__')}}
#define USE_{{package.replace('.', '__')}}
#define USE_{{ns.replace('::', '__')}}__init
#define USE_algorithms__covariance
#define USE_algorithms__engines
#define USE_algorithms__engines__mt19937

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here
// we cannot disambiguate enum types (they are all int)
//  -> we need to rename overloads that only differ in enum type
//     otherwise all except one would be hidden/ignored/shadowed in the python API
%rename (setTable) daal::algorithms::em_gmm::interface1::Input::set(InputId id, const data_management::NumericTablePtr &ptr);
%rename (getTable) daal::algorithms::em_gmm::interface1::Input::get(InputId id) const;
%rename (setCovariances) daal::algorithms::em_gmm::interface1::Input::set(InputCovariancesId id, const data_management::DataCollectionPtr &ptr);
%rename (getCovariances) daal::algorithms::em_gmm::interface1::Input::get(InputCovariancesId id) const;
%rename (getCovariances) daal::algorithms::em_gmm::interface1::Input::get(InputCovariancesId id, size_t index) const;
%rename (setValues) daal::algorithms::em_gmm::interface1::Input::set(InputValuesId id, const init::ResultPtr &ptr);
 // no %rename (getValues) : missing get in C++ class
%rename (setResult) daal::algorithms::em_gmm::interface1::Result::set(ResultId id, const data_management::NumericTablePtr &ptr);
%rename (getResult) daal::algorithms::em_gmm::interface1::Result::get(ResultId id) const;
%rename (setCovariances) daal::algorithms::em_gmm::interface1::Result::set(ResultCovariancesId id, const data_management::DataCollectionPtr &ptr);
%rename (getCovariances) daal::algorithms::em_gmm::interface1::Result::get(ResultCovariancesId id) const;
%rename (getCovariances) daal::algorithms::em_gmm::interface1::Result::get(ResultCovariancesId id, size_t index) const;

// only import the last module in package hierachy (omit importing its parents)
%import "{{package.replace('.', '__')}}.i"
%import "algorithms__covariance.i"
%import "algorithms__em_gmm__init.i"

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
using namespace daal::{{ns}};
using namespace daal::algorithms;
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}
    // Add our compute wrappers
    {{add_compute("Batch")}}
    // no Online
    // no Distributed

    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

{% endcall %}

{{add_aliases(cfg)}}

%pythoncode %{
    from . import init
%}
