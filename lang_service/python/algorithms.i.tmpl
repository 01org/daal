/*******************************************************************************
* Copyright 2014-2019 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::algorithms namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace,
                         add_includes, add_aliases, add_ignores, handle_all_templates, cls_with_iface %}
{% set ns  = 'algorithms' %}
{% set module  = 'algorithms' %}
{% set package = 'daal' %}

// see jinjadefs.tmpl for all configuration options evaluated
// by standard macros.
// like 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'classes': ['AlgorithmContainerIface',
                'AlgorithmContainerIfaceImpl',
                'AlgorithmDispatchContainer',
                'AlgorithmIface',
                'AlgorithmIfaceImpl',
                'Argument',
                'DistributedPrediction',
                'HostAppIface',
                'Input',
                'Kernel',
                'Model',
                'OptionalArgument',
                'Parameter',
                'PartialResult',
                'Prediction',
                'Result',
                'SerializableArgument',
                'PredictionContainerIface',
                'DistributedPredictionContainerIface',],
    'templates': {
        'Algorithm': [['cmode', cmodes, '']],
        'AlgorithmImpl': [['cmode', cmodes, '']],
        'Analysis': [['cmode', cmodes, '']],
        'Training': [['cmode', cmodes, '']],
        'AlgorithmContainer': [['cmode', cmodes, '']],
        'AlgorithmContainerImpl': [['cmode', cmodes, '']],
        'AnalysisContainerIface': [['cmode', cmodes, '']],
    },
    'namespaces': {
        'Analysis': '',
        'Training': '',
        'Prediction': '',
        'DistributedPrediction': '',
        'AnalysisContainerIface': '',
        'PredictionContainerIface': '',
        'TrainingContainerIface': '',
        'DistributedPredictionContainerIface': '',
    },
} %}

{{declare_module(package, module)}}

// define the namespace needed as being used
// we only include those we need to save SWIG compile time
#define USE_{{ns.replace('::', '__')}}

%include "daal_common.i"

// renaming, typemaps need to go before declarations -> put them here

// only import the last module in package hierachy (omit importing its parents)
%import "data_management.i"

// standard/basic type mappings
%import <std_string.i>
%shared_ptr(daal::algorithms::interface1::Model);

%{
#include <daal.h>
using namespace daal;
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
%include <algorithms/algorithm_kernel.h>
%include <algorithms/algorithm_container_base_common.h>
%include <algorithms/algorithm_container_base_batch.h>
%include <algorithms/algorithm_base_common.h>
%include <algorithms/algorithm_base_mode.h>
%include <algorithms/algorithm_base_mode_impl.h>
%include <algorithms/algorithm_types.h>

{% call() in_namespace('::'.join(['daal', ns])) %}

    // Declare the parent template instantiations we want
    // these need to go before including/declaring derived clases
    {{ handle_all_templates(ns, cfg, ['Algorithm', 'AlgorithmImpl','AlgorithmContainer', 'AlgorithmContainerImpl']) }}

{% endcall %}


{% call() in_namespace('::'.join(['daal', ns])) %}

    {% for c in ['Algorithm', 'AlgorithmImpl', 'AlgorithmContainer', 'AlgorithmContainerImpl', ] %}
        {% for cm in cmodes %}
    using {{cls_with_iface(c, cfg)}}<{{cm}}>;
        {% endfor %}
    {% endfor %}

{% endcall %}

%include <algorithms/analysis.h>
%include <algorithms/model.h>
%include <algorithms/training.h>
%include <algorithms/prediction.h>

{% call() in_namespace('::'.join(['daal', ns])) %}

    {{ handle_all_templates(ns, cfg, ['Analysis', 'Training', 'AnalysisContainerIface',]) }}

{% endcall %}

{{add_aliases(cfg)}}
