/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::services namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace,
                         add_includes, add_aliases, add_ignores, handle_all_templates, add_setgetitem,
                         cls_with_iface %}
{% set ns  = 'services' %}
{% set module  = 'services' %}
{% set package = 'daal' %}

// see jinjadefs.tmpl for all configuration options evaluated
// by standard macros.
// like 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': ['services/daal_kernel_defines.h',
                 'services/collection.h',
                 'services/library_version_info.h',
                 'services/error_indexes.h',
                 'services/error_handling.h',],
    'needpatch': [('include/services/env_detect.h',
                   "'private:' 'protected:'",
                   'env__detect.h')],
    'dontincludes': ['services/error_id.h',
                     'services/daal_memory.h',
                     'services/daal_atomic_int.h',
                     'services/daal_shared_ptr.h',
                     'services/daal_string.h'],
    'classes': ['Environment', 'LibraryVersionInfo',],
    'ignore': ['ErrorCollection',],
    'unusedclasses': ['AtomicInt',
                      'DeleterIface',
                      'Error',
                      'ErrorDetail',
                      'Exception',
                      'KernelErrorCollection',
                      'SharedPtr',
                      'String',
                      '_envStruct'],
    'templates': {
        'Collection': [['DataType',
                       [ "daal::data_management::interface1::SerializationIfacePtr",
                         "daal::services::SharedPtr< daal::data_management::interface1::DataBlock >",],
                        '']],
    },
    'unusedtemplates': [['ArrayDeleter', '<class T>'],
                        ['DeleterIface::SharedPtr', '<class U, class D>'],
                        ['DeleterIface::SharedPtr', '<class U>'],
                        ['DeleterIface::SharedPtr', '<class U>'],
                        ['DeleterIface::SharedPtr', '<class U>'],
                        ['EmptyDeleter', '<class T>'],
                        ['Message', '<class IDType>'],
                        ['ObjectDeleter', '<class T>'],
                        ['SharedPtr', '<class T>'],
                        ['SharedPtr::dynamicPointerCast', '<class T, class U>'],
                        ['SharedPtr::staticPointerCast', '<class T, class U>']],
} %}

{{declare_module(package, module)}}

%include "daal_common.i"
// SWIG warnings
%include "swigwarn.i"

// import the files swig needs (don't include!)
// only import the last module in package hierachy (omit importing its parents)
%import "daal.i"

// standard/basic type mappings
%import <std_string.i>
%ignore std::exception;
namespace std {
class exception {};
}

%immutable daal::services::{{cls_with_iface('LibraryVersionInfo', cfg)}}::majorVersion;
%immutable daal::services::{{cls_with_iface('LibraryVersionInfo', cfg)}}::minorVersion;
%immutable daal::services::{{cls_with_iface('LibraryVersionInfo', cfg)}}::updateVersion;
%immutable daal::services::{{cls_with_iface('LibraryVersionInfo', cfg)}}::productStatus;
%immutable daal::services::{{cls_with_iface('LibraryVersionInfo', cfg)}}::build;
%immutable daal::services::{{cls_with_iface('LibraryVersionInfo', cfg)}}::build_rev;
%immutable daal::services::{{cls_with_iface('LibraryVersionInfo', cfg)}}::name;
%immutable daal::services::{{cls_with_iface('LibraryVersionInfo', cfg)}}::processor;

%clear const daal::services::SharedPtr &; 

%{
#include <daal.h>
using namespace daal::services;
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
// first make 'external' classes/defs known without generating wrappers
%import(package="daal.data_management") <data_management/data/data_serialize.h>
%import(package="daal.data_management") <data_management/data/data_block.h>
{{add_includes(cfg)}}

{% call() in_namespace('::'.join(['daal', ns])) %}

    // Class transformations
    {{add_setgetitem("Collection", "T &", "size_t")}}
    // now all template instantiations
    {{handle_all_templates(ns, cfg)}}

    using {{cls_with_iface('Collection', cfg)}}< daal::data_management::{{cls_with_iface('SerializationIfacePtr', cfg)}} >;
    using {{cls_with_iface('Collection', cfg)}}< daal::services::SharedPtr<daal::data_management::{{cls_with_iface('DataBlock', cfg)}}> >;

{% endcall %}

{{add_aliases(cfg)}}
