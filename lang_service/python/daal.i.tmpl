/*******************************************************************************
* Copyright 2014-2019 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/

/* Defines the classes/types/consts etc of the daal::daal namespace of DAAL */

{% from 'jinjadefs.tmpl' import declare_module, add_compute, add_compute2, in_namespace, add_includes, add_aliases, add_ignores, handle_all_templates %}
{% set ns  = 'daal' %}
{% set module  = 'daal' %}
{% set package = 'daal' %}

// see jinjadefs.tmpl for all configuration options evaluated
// by standard macros.
// like 'needpatch', 'ignore', 'steps', 'methods' and others
{% set cfg = {
    'includes': ['services/daal_defines.h', 'services/base.h'],
    'FIXMEincludes': ['algorithms/neural_networks/layers/pooling/pooling_layer_types.h',
                      'algorithms/naive_bayes/multinomial_naive_bayes_types.h',
                      'algorithms/multi_class_classifier/multi_class_classifier_types.h',
                      'algorithms/linear_regression/linear_regression_types.h',
                      'daal.h',
                      'algorithms/algorithm_base.h',
                      'algorithms/algorithm.h',
                      'algorithms/neural_networks/layers/pooling/pooling_layer.h',
                      'algorithms/neural_networks/layers/spatial_pooling/spatial_pooling_layer.h',],
    'classes': [],
    'templates': {},
} %}

%module daal

%pythoncode %{
__version__ = "{{PYDAAL_VERSION}}"
## @package daal Main module
%}

%include <services/daal_defines.h>
%include daal_common.i

// standard/basic type mappings
%import <std_string.i>

%{
#include <daal.h>
%}

// declare to-be-ignored classes *before* scanning headers
{{add_ignores(cfg,ns)}}

// Let swig do the heavy-lifting: parse the headers and
//  extract the interfaces
{{add_includes(cfg)}}

namespace daal {

    // Class transformations
    // Declare the template instantiations we want
    
 }

{{add_aliases(cfg)}}
