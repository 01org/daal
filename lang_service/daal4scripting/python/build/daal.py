# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_daal4py', [dirname(__file__)])
        except ImportError:
            import _daal4py
            return _daal4py
        if fp is not None:
            try:
                _mod = imp.load_module('_daal4py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _daal4py = swig_import_helper()
    del swig_import_helper
else:
    import _daal4py
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


import numpy


_daal4py.SHAREDPTR_DISOWN_swigconstant(_daal4py)
SHAREDPTR_DISOWN = _daal4py.SHAREDPTR_DISOWN
class KernelIface_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KernelIface_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KernelIface_i, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _daal4py.new_KernelIface_i()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _daal4py.delete_KernelIface_i
    __del__ = lambda self: None
KernelIface_i_swigregister = _daal4py.KernelIface_i_swigregister
KernelIface_i_swigregister(KernelIface_i)

class classifier_prediction_Batch_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, classifier_prediction_Batch_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, classifier_prediction_Batch_i, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _daal4py.new_classifier_prediction_Batch_i()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _daal4py.delete_classifier_prediction_Batch_i
    __del__ = lambda self: None
classifier_prediction_Batch_i_swigregister = _daal4py.classifier_prediction_Batch_i_swigregister
classifier_prediction_Batch_i_swigregister(classifier_prediction_Batch_i)

class classifier_training_Batch_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, classifier_training_Batch_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, classifier_training_Batch_i, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _daal4py.new_classifier_training_Batch_i()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _daal4py.delete_classifier_training_Batch_i
    __del__ = lambda self: None
classifier_training_Batch_i_swigregister = _daal4py.classifier_training_Batch_i_swigregister
classifier_training_Batch_i_swigregister(classifier_training_Batch_i)

class multinomial_naive_bayes_prediction_i(classifier_prediction_Batch_i):
    __swig_setmethods__ = {}
    for _s in [classifier_prediction_Batch_i]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, multinomial_naive_bayes_prediction_i, name, value)
    __swig_getmethods__ = {}
    for _s in [classifier_prediction_Batch_i]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, multinomial_naive_bayes_prediction_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data, i_model):
        return _daal4py.multinomial_naive_bayes_prediction_i_compute(self, i_data, i_model)
    __swig_destroy__ = _daal4py.delete_multinomial_naive_bayes_prediction_i
    __del__ = lambda self: None
multinomial_naive_bayes_prediction_i_swigregister = _daal4py.multinomial_naive_bayes_prediction_i_swigregister
multinomial_naive_bayes_prediction_i_swigregister(multinomial_naive_bayes_prediction_i)

class multinomial_naive_bayes_training_i(classifier_training_Batch_i):
    __swig_setmethods__ = {}
    for _s in [classifier_training_Batch_i]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, multinomial_naive_bayes_training_i, name, value)
    __swig_getmethods__ = {}
    for _s in [classifier_training_Batch_i]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, multinomial_naive_bayes_training_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data, i_labels):
        return _daal4py.multinomial_naive_bayes_training_i_compute(self, i_data, i_labels)
    __swig_destroy__ = _daal4py.delete_multinomial_naive_bayes_training_i
    __del__ = lambda self: None
multinomial_naive_bayes_training_i_swigregister = _daal4py.multinomial_naive_bayes_training_i_swigregister
multinomial_naive_bayes_training_i_swigregister(multinomial_naive_bayes_training_i)

class kmeans_init_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmeans_init_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kmeans_init_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data):
        return _daal4py.kmeans_init_i_compute(self, i_data)
    __swig_destroy__ = _daal4py.delete_kmeans_init_i
    __del__ = lambda self: None
kmeans_init_i_swigregister = _daal4py.kmeans_init_i_swigregister
kmeans_init_i_swigregister(kmeans_init_i)

class kmeans_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmeans_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kmeans_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data, i_inputCentroids):
        return _daal4py.kmeans_i_compute(self, i_data, i_inputCentroids)
    __swig_destroy__ = _daal4py.delete_kmeans_i
    __del__ = lambda self: None
kmeans_i_swigregister = _daal4py.kmeans_i_swigregister
kmeans_i_swigregister(kmeans_i)

class pca_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pca_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pca_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data):
        return _daal4py.pca_i_compute(self, i_data)
    __swig_destroy__ = _daal4py.delete_pca_i
    __del__ = lambda self: None
pca_i_swigregister = _daal4py.pca_i_swigregister
pca_i_swigregister(pca_i)

class linear_i(KernelIface_i):
    __swig_setmethods__ = {}
    for _s in [KernelIface_i]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, linear_i, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelIface_i]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, linear_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_X, i_Y):
        return _daal4py.linear_i_compute(self, i_X, i_Y)
    __swig_destroy__ = _daal4py.delete_linear_i
    __del__ = lambda self: None
linear_i_swigregister = _daal4py.linear_i_swigregister
linear_i_swigregister(linear_i)

class rbf_i(KernelIface_i):
    __swig_setmethods__ = {}
    for _s in [KernelIface_i]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, rbf_i, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelIface_i]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, rbf_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_X, i_Y):
        return _daal4py.rbf_i_compute(self, i_X, i_Y)
    __swig_destroy__ = _daal4py.delete_rbf_i
    __del__ = lambda self: None
rbf_i_swigregister = _daal4py.rbf_i_swigregister
rbf_i_swigregister(rbf_i)

class svm_training_i(classifier_training_Batch_i):
    __swig_setmethods__ = {}
    for _s in [classifier_training_Batch_i]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, svm_training_i, name, value)
    __swig_getmethods__ = {}
    for _s in [classifier_training_Batch_i]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, svm_training_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data, i_labels):
        return _daal4py.svm_training_i_compute(self, i_data, i_labels)
    __swig_destroy__ = _daal4py.delete_svm_training_i
    __del__ = lambda self: None
svm_training_i_swigregister = _daal4py.svm_training_i_swigregister
svm_training_i_swigregister(svm_training_i)

class svm_prediction_i(classifier_prediction_Batch_i):
    __swig_setmethods__ = {}
    for _s in [classifier_prediction_Batch_i]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, svm_prediction_i, name, value)
    __swig_getmethods__ = {}
    for _s in [classifier_prediction_Batch_i]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, svm_prediction_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data, i_model):
        return _daal4py.svm_prediction_i_compute(self, i_data, i_model)
    __swig_destroy__ = _daal4py.delete_svm_prediction_i
    __del__ = lambda self: None
svm_prediction_i_swigregister = _daal4py.svm_prediction_i_swigregister
svm_prediction_i_swigregister(svm_prediction_i)

class linear_regression_prediction_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, linear_regression_prediction_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, linear_regression_prediction_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data, i_model):
        return _daal4py.linear_regression_prediction_i_compute(self, i_data, i_model)
    __swig_destroy__ = _daal4py.delete_linear_regression_prediction_i
    __del__ = lambda self: None
linear_regression_prediction_i_swigregister = _daal4py.linear_regression_prediction_i_swigregister
linear_regression_prediction_i_swigregister(linear_regression_prediction_i)

class linear_regression_training_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, linear_regression_training_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, linear_regression_training_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data, i_dependentVariables):
        return _daal4py.linear_regression_training_i_compute(self, i_data, i_dependentVariables)
    __swig_destroy__ = _daal4py.delete_linear_regression_training_i
    __del__ = lambda self: None
linear_regression_training_i_swigregister = _daal4py.linear_regression_training_i_swigregister
linear_regression_training_i_swigregister(linear_regression_training_i)

class univariate_outlier_detection_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, univariate_outlier_detection_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, univariate_outlier_detection_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, *args, **kwargs):
        return _daal4py.univariate_outlier_detection_i_compute(self, *args, **kwargs)
    __swig_destroy__ = _daal4py.delete_univariate_outlier_detection_i
    __del__ = lambda self: None
univariate_outlier_detection_i_swigregister = _daal4py.univariate_outlier_detection_i_swigregister
univariate_outlier_detection_i_swigregister(univariate_outlier_detection_i)

class multivariate_outlier_detection_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, multivariate_outlier_detection_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, multivariate_outlier_detection_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, *args, **kwargs):
        return _daal4py.multivariate_outlier_detection_i_compute(self, *args, **kwargs)
    __swig_destroy__ = _daal4py.delete_multivariate_outlier_detection_i
    __del__ = lambda self: None
multivariate_outlier_detection_i_swigregister = _daal4py.multivariate_outlier_detection_i_swigregister
multivariate_outlier_detection_i_swigregister(multivariate_outlier_detection_i)

class svd_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svd_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svd_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data):
        return _daal4py.svd_i_compute(self, i_data)
    __swig_destroy__ = _daal4py.delete_svd_i
    __del__ = lambda self: None
svd_i_swigregister = _daal4py.svd_i_swigregister
svd_i_swigregister(svd_i)

class multi_class_classifier_training_i(classifier_training_Batch_i):
    __swig_setmethods__ = {}
    for _s in [classifier_training_Batch_i]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, multi_class_classifier_training_i, name, value)
    __swig_getmethods__ = {}
    for _s in [classifier_training_Batch_i]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, multi_class_classifier_training_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data, i_labels):
        return _daal4py.multi_class_classifier_training_i_compute(self, i_data, i_labels)
    __swig_destroy__ = _daal4py.delete_multi_class_classifier_training_i
    __del__ = lambda self: None
multi_class_classifier_training_i_swigregister = _daal4py.multi_class_classifier_training_i_swigregister
multi_class_classifier_training_i_swigregister(multi_class_classifier_training_i)

class multi_class_classifier_prediction_i(classifier_prediction_Batch_i):
    __swig_setmethods__ = {}
    for _s in [classifier_prediction_Batch_i]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, multi_class_classifier_prediction_i, name, value)
    __swig_getmethods__ = {}
    for _s in [classifier_prediction_Batch_i]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, multi_class_classifier_prediction_i, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def compute(self, i_data, i_model):
        return _daal4py.multi_class_classifier_prediction_i_compute(self, i_data, i_model)
    __swig_destroy__ = _daal4py.delete_multi_class_classifier_prediction_i
    __del__ = lambda self: None
multi_class_classifier_prediction_i_swigregister = _daal4py.multi_class_classifier_prediction_i_swigregister
multi_class_classifier_prediction_i_swigregister(multi_class_classifier_prediction_i)


def multinomial_naive_bayes_prediction(*args, **kwargs):
    return _daal4py.multinomial_naive_bayes_prediction(*args, **kwargs)
multinomial_naive_bayes_prediction = _daal4py.multinomial_naive_bayes_prediction

def multinomial_naive_bayes_training(*args, **kwargs):
    return _daal4py.multinomial_naive_bayes_training(*args, **kwargs)
multinomial_naive_bayes_training = _daal4py.multinomial_naive_bayes_training

def kmeans_init(*args, **kwargs):
    return _daal4py.kmeans_init(*args, **kwargs)
kmeans_init = _daal4py.kmeans_init

def kmeans(*args, **kwargs):
    return _daal4py.kmeans(*args, **kwargs)
kmeans = _daal4py.kmeans

def pca(*args, **kwargs):
    return _daal4py.pca(*args, **kwargs)
pca = _daal4py.pca

def linear(*args, **kwargs):
    return _daal4py.linear(*args, **kwargs)
linear = _daal4py.linear

def rbf(*args, **kwargs):
    return _daal4py.rbf(*args, **kwargs)
rbf = _daal4py.rbf

def svm_training(*args, **kwargs):
    return _daal4py.svm_training(*args, **kwargs)
svm_training = _daal4py.svm_training

def svm_prediction(*args, **kwargs):
    return _daal4py.svm_prediction(*args, **kwargs)
svm_prediction = _daal4py.svm_prediction

def linear_regression_prediction(*args, **kwargs):
    return _daal4py.linear_regression_prediction(*args, **kwargs)
linear_regression_prediction = _daal4py.linear_regression_prediction

def linear_regression_training(*args, **kwargs):
    return _daal4py.linear_regression_training(*args, **kwargs)
linear_regression_training = _daal4py.linear_regression_training

def univariate_outlier_detection(*args, **kwargs):
    return _daal4py.univariate_outlier_detection(*args, **kwargs)
univariate_outlier_detection = _daal4py.univariate_outlier_detection

def multivariate_outlier_detection(*args, **kwargs):
    return _daal4py.multivariate_outlier_detection(*args, **kwargs)
multivariate_outlier_detection = _daal4py.multivariate_outlier_detection

def svd(*args, **kwargs):
    return _daal4py.svd(*args, **kwargs)
svd = _daal4py.svd

def multi_class_classifier_training(*args, **kwargs):
    return _daal4py.multi_class_classifier_training(*args, **kwargs)
multi_class_classifier_training = _daal4py.multi_class_classifier_training

def multi_class_classifier_prediction(*args, **kwargs):
    return _daal4py.multi_class_classifier_prediction(*args, **kwargs)
multi_class_classifier_prediction = _daal4py.multi_class_classifier_prediction

def daalinit(spmd=False, flag=0):
    return _daal4py.daalinit(spmd, flag)
daalinit = _daal4py.daalinit

def daalfini():
    return _daal4py.daalfini()
daalfini = _daal4py.daalfini

def num_procs():
    return _daal4py.num_procs()
num_procs = _daal4py.num_procs

def my_procid():
    return _daal4py.my_procid()
my_procid = _daal4py.my_procid
# This file is compatible with both classic and new-style classes.


