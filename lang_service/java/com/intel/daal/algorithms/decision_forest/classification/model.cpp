/* file: model.cpp */
/*******************************************************************************
* Copyright 2014-2017 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "daal.h"
#include "decision_forest/classification/JModel.h"
#include "common_helpers.h"
#include "common_helpers_functions.h"
#include "java_callback.h"

USING_COMMON_NAMESPACES()
namespace dfc = daal::algorithms::decision_forest::classification;

/*
* \brief Callback class implementing NodeVisitor interface
*/
struct JavaNodeVisitor : public dfc::NodeVisitor, public JavaCallback
{
    JavaNodeVisitor(JavaVM *_jvm, jobject _javaObject) : JavaCallback(_jvm, _javaObject) {}

    virtual ~JavaNodeVisitor()
    {}

    virtual bool onLeafNode(size_t level, size_t response) DAAL_C11_OVERRIDE
    {
        ThreadLocalStorage tls = _tls.local();
        jint status = jvm->AttachCurrentThread((void **)(&tls.jniEnv), NULL);
        JNIEnv *env = tls.jniEnv;

        /* Get current context */
        jclass javaObjectClass = env->GetObjectClass(javaObject);
        if(javaObjectClass == NULL)
            throwError(env, "Couldn't find class of this java object");

        jmethodID methodID = env->GetMethodID(javaObjectClass, "onLeafNode", "(JJ)Z");
        if(methodID == NULL)
            throwError(env, "Couldn't find onLeafNode method");

        jboolean val = env->CallBooleanMethod(javaObject, methodID, (jlong)level, (jlong)response);

        if(!tls.is_main_thread)
            status = jvm->DetachCurrentThread();
        _tls.local() = tls;
        return val != 0;
    }

    virtual bool onSplitNode(size_t level, size_t featureIndex, double featureValue) DAAL_C11_OVERRIDE
    {
        ThreadLocalStorage tls = _tls.local();
        jint status = jvm->AttachCurrentThread((void **)(&tls.jniEnv), NULL);
        JNIEnv *env = tls.jniEnv;

        /* Get current context */
        jclass javaObjectClass = env->GetObjectClass(javaObject);
        if(javaObjectClass == NULL)
            throwError(env, "Couldn't find class of this java object");

        jmethodID methodID = env->GetMethodID(javaObjectClass, "onSplitNode", "(JJD)Z");
        if(methodID == NULL)
            throwError(env, "Couldn't find onSplitNode method");
        jboolean val = env->CallBooleanMethod(javaObject, methodID, (jlong)level, (jlong)featureIndex, (jdouble)featureValue);

        if(!tls.is_main_thread)
            status = jvm->DetachCurrentThread();
        _tls.local() = tls;
        return val != 0;
    }
};

/*
* Class:     com_intel_daal_algorithms_decision_forest_classification_Model
* Method:    cGetNumberOfTrees
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_classification_Model_cGetNumberOfTrees
(JNIEnv *, jobject, jlong modAddr)
{
    return (jlong)(*(dfc::ModelPtr *)modAddr)->numberOfTrees();
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_classification_Model
* Method:    cTraverseDF
* Signature: (JJLcom/intel/daal/algorithms/decision_forest/classification/NodeVisitor;)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1forest_classification_Model_cTraverseDF
(JNIEnv *env, jobject, jlong modAddr, jlong iTree, jobject visitor)
{
    JavaVM *jvm;
    // Get pointer to the Java VM interface function table
    jint status = env->GetJavaVM(&jvm);
    if(status != 0)
        throwError(env, "Couldn't get Java VM interface");
    JavaNodeVisitor visitorImpl(jvm, visitor);
    (*(dfc::ModelPtr *)modAddr)->traverseDF((size_t)iTree, visitorImpl);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_classification_Model
* Method:    cTraverseBF
* Signature: (JJLcom/intel/daal/algorithms/decision_forest/classification/NodeVisitor;)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1forest_classification_Model_cTraverseBF
(JNIEnv *env, jobject, jlong modAddr, jlong iTree, jobject visitor)
{
    JavaVM *jvm;
    // Get pointer to the Java VM interface function table
    jint status = env->GetJavaVM(&jvm);
    if(status != 0)
        throwError(env, "Couldn't get Java VM interface");
    JavaNodeVisitor visitorImpl(jvm, visitor);
    (*(dfc::ModelPtr *)modAddr)->traverseBF((size_t)iTree, visitorImpl);
}
