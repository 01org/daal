#===============================================================================
# Copyright 2014-2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================

##  Content:
##     oneAPI Data Analytics Library examples build and run
##******************************************************************************

help:
	@echo "Usage: make {lib|so|libintel64|sointel64|help}"
	@echo "lib is alias libintel64, so is alias for sointel64"
	@echo "[example=name] [compiler=compiler_name] [mode=mode_name] [threading=threading_name]"
	@echo
	@echo "name              - example name. Please see daal.lst file"
	@echo
	@echo "compiler_name     - currently can be dpc++ only that stands
	@echo "                    for oneAPI DPC++ Compiler."
	@echo
	@echo "threading_name    - can be parallel or sequential in case CPU"
	@echo "                    selector is used. Default value is parallel."
	@echo
	@echo "mode_name         - can be build or run. Default is run"

##------------------------------------------------------------------------------
## examples of using:
##
## make libia32 example=pca_cor_dense_batch -
##                                  build  by Intel(R) C++ Compiler (as default)
##                                  and  run  association_rules  example  for 32-bit
##                                  applications, static linking
##
## make soia32 compiler=dpc++     - build by GNU C++ compiler and run all examples
##                                  of Intel(R) DAAL for
##                                  32-bit applications, dynamic linking
##
## make libintel64 compiler=dpc++ - build by GNU C++ compiler and run all example
##                                  of Intel(R) DAAL for
##                                  Intel(R) 64 processor family applications,
##                                  static linking
##
## make sointel64                 - build by Intel(R) C++ Compiler (as default)
##                                  and run all examples for Intel(R)64 processor
##                                  family  applications, dynamic linking
##
## make sointel64 mode=build      - build only (not run) by Intel(R) C++ Compiler
##                                  (as default) all examples for Intel(R)64
##                                  processor family  applications, dynamic linking
##
## make help                      - show help
##
##------------------------------------------------------------------------------

include daal.lst

ifndef example
    example = $(DAAL)
endif

ifneq ($(compiler),dpc++)
    override compiler = dpc++
endif

ifneq ($(mode),build)
    override mode = run
endif

ifndef DAALROOT
    DAALROOT = ./../../..
endif
DAAL_PATH = $(DAALROOT)/lib/intel64

ifndef TBBROOT
    TBBROOT = ./../../../../../tbb/latest
endif
TBB_PATH = $(TBBROOT)/lib/intel64/gcc4.8

EXT_LIB := -lpthread -ldl

ifeq ($(threading),sequential)
    DAAL_LIB_T := $(DAAL_PATH)/libdaal_sequential.$(RES_EXT)
    EXT_LIB += $(addprefix -L,$(TBB_PATH)) -ltbb -ltbbmalloc
else
    override threading = parallel
    DAAL_LIB_T := $(DAAL_PATH)/libdaal_thread.$(RES_EXT)
    EXT_LIB += $(addprefix -L,$(TBB_PATH)) -ltbb -ltbbmalloc
endif

DAAL_LIB := "$(DAAL_PATH)/libonedal.$(RES_EXT)" \
            "$(DAAL_PATH)/libonedal_dpc.$(RES_EXT)" \
            "$(DAAL_PATH)/libdaal_core.$(RES_EXT)" \
			"$(DAAL_LIB_T)"

COPTS := -std=c++17 \
         -pedantic \
         -Wall \
         -Wextra \
         -Werror \
         -Werror=return-type \
         -Werror=uninitialized \
         -Werror=unknown-pragmas \
         -Wno-unused-parameter \
         -I./source/utils \
         -I"$(DAALROOT)/include"

LOPTS := -Wl,--start-group $(DAAL_LIB) $(EXT_LIB) -Wl,--end-group

RES_DIR=_results/$(compiler)_intel64_$(threading)_$(RES_EXT)
RES = $(addprefix $(RES_DIR)/, $(if $(filter run,$(mode)), $(addsuffix .res,$(example)), $(addsuffix .exe,$(example))))

ifeq ($(compiler),dpc++)
    gcc_toolchain := $(realpath $(dir $(shell which gcc))/..)
    CC = dpcpp --gcc-toolchain=$(gcc_toolchain)
endif

CC := $(if $(COVFILE), cov01 -1; covc -i  $(CC),$(CC))

lib libintel64:
	$(MAKE) _make_ex RES_EXT=a
so sointel64:
	$(MAKE) _make_ex RES_EXT=so

_make_ex: $(RES)

vpath
vpath %.cpp $(addprefix ./source/,pca)

.SECONDARY:
$(RES_DIR)/%.exe: %.cpp | $(RES_DIR)/.
	$(CC) $(COPTS) $< -o $@ $(LOPTS)

$(RES_DIR)/%.res: $(RES_DIR)/%.exe
	$< > $@

%/.:; mkdir -p $*
